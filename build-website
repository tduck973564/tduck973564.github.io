#!/usr/bin/env python3

import os
from bs4 import BeautifulSoup
from pathlib import Path
from datetime import datetime

os.chdir("./docs")

with open("_navbar.html") as file:
    navbar = file.read()
navbarSoup = BeautifulSoup(navbar, 'html.parser')

for file in os.listdir("./"):
    if file.endswith(".html") and not file.startswith("_"):
        with open(file) as file:
            currentFile = file.read()
        currentFileSoup = BeautifulSoup(currentFile, 'html.parser')
        name = currentFileSoup.find(id='name')
        cont = True
        for navbarLiEntry in navbarSoup.find_all(name="li"):
            for navbarEntry in navbarSoup.find_all(name="a"):
                if navbarEntry.get('href').split("/")[-1] == file.name:
                    cont = False
                if navbarEntry.get('href').split("/")[-1] not in os.listdir("./"):
                    _ = navbarLiEntry.extract()
        if cont:
            try:
                newTag = BeautifulSoup(f'<li><a href="/{file.name}">{name.text}</a></li>', 'html.parser')
                navbarSoup.nav.ul.append(newTag)
            except: continue

with open("_navbar.html", "w") as out:
    out.write(str(navbarSoup))
def addNavbarToPages(navbar_file_path):
    for file in os.listdir():
        with open(navbar_file_path) as openedNavbarFile:
            navbar = openedNavbarFile.read()
        navbarSoup = BeautifulSoup(navbar, 'html.parser')
        if file.endswith(".html") and not file.startswith("_") and file != "hydrologic_cycle.html":
            print("Adding navbar to " + file + "...")
            with open(file) as openedFile:
                currentFile = openedFile.read()
            currentFileSoup = BeautifulSoup(currentFile, 'html.parser')
            for i in currentFileSoup.find_all("nav"):
                _ = i.extract()
            try:
                currentFileSoup.html.insert(0, navbarSoup)
            except:
                print("Could not add navbar to " + file + "...")
                continue
            with open(file, "w") as out:
                out.write(str(currentFileSoup))
addNavbarToPages("_navbar.html")

with open("_blogposts.html") as file:
    blogPosts = file.read()
blogPostsSoup = BeautifulSoup(blogPosts, 'html.parser')

os.chdir("./blog")

addNavbarToPages("../_navbar.html")

print("Generating blog...")
for file in sorted(os.listdir("./"), key = os.path.getctime):
    if file.endswith(".html") and not file.startswith("_"):
        with open(file) as file:
            currentFile = file.read()
        currentFileSoup = BeautifulSoup(currentFile, 'html.parser')
        name = currentFileSoup.find(id='name')
        cont = True
        for blogBlock in blogPostsSoup.find_all(class_="text-block"):
            for blogEntry in blogBlock.find_all(name="a"):
                if blogEntry.get('href').split('/')[-1] == file.name:
                    cont = False
                if blogEntry.get('href').split('/')[-1] not in os.listdir("./"):
                    _ = blogBlock.extract()
        if cont:
            try:
                newTag = BeautifulSoup(f'<div class="text-block"><h2><a href="{"/blog/"+file.name}">{name.text}</a></h2><p>Created: {datetime.fromtimestamp(os.path.getctime(file.name)).replace(microsecond=0).isoformat()}</p><p>Last modified: {datetime.fromtimestamp(os.path.getmtime(file.name)).replace(microsecond=0).isoformat()}</p></div>', 'html.parser')
                blogPostsSoup.append(newTag)
            except: continue

os.chdir("../")

with open("_blogposts.html", "w") as out:
    out.write(str(blogPostsSoup))

with open("blog.html") as file:
    blog = file.read()
blogSoup = BeautifulSoup(blog, 'html.parser')

blogSoup.find('div', id="blog").decompose()
blogDivSoup = BeautifulSoup(f'<div id="blog">{str(blogPostsSoup)}</div>', 'html.parser')
blogSoup.html.body.div.append(blogDivSoup)

with open("blog.html", "w") as out:
    out.write(str(blogSoup))

os.chdir("../")
print("Compiling stylesheets...")
os.system("./build-stylesheets")
print("Done")
